#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""
Fedora User Repository CLI

Spec parsing limitations:
        Sources and Patches must be added by url
"""

import sys, os, re, getpass
import urllib.request

def get_fur_url():
    with open('/etc/fedora-user-repository', 'r') as url_file:
        url=url_file.read().replace('\n', '')
    return url

def get_fedora_version():
    with open('/etc/fedora-release', 'r') as release_file:
        fedora_release=release_file.read().replace('\n', '')
    fedora_release_num = ""
    for s in fedora_release.split():
            if s.isdigit():
                fedora_release_num = fedora_release_num + s
    return fedora_release_num

def find_spec_var(name, var):
    user = getpass.getuser()
    try:
        spec_file = open("/home/" + user + "/.fur/" + name + "/" + name + ".spec", "r")
        if (var == "name"):
            for spec_line in spec_file:
                if "Name:" in spec_line:
                    spec_line = re.sub(r"Name:", "", spec_line)
                    spec_line = spec_line.rstrip()
                    return spec_line

        if (var == "version"):
            for spec_line in spec_file:
                if "Version:" in spec_line:
                    spec_line = re.sub(r"Version:", "", spec_line)
                    spec_line = spec_line.rstrip()
                    return spec_line
    except:
        raise NameError("BAD_SPEC")
    return 0

def get_spec(name, path = 0):
    url =  get_fur_url()
    user = getpass.getuser()
    os.system("mkdir -p ~/.fur/" + name)
    if (path != 0):
        try:
            urllib.request.urlretrieve(url + name + ".spec", "/home/" + user + "/.fur/" + path + "/" + name + ".spec")
        except:
            os.system("rm -R ~/.fur/" + name)
            raise NameError("UNK_PKG")
    else:
        try:
            urllib.request.urlretrieve(url + name + ".spec", "/home/" + user + "/.fur/" + name + "/" + name + ".spec")
        except:
            os.system("rm -R ~/.fur/" + name)
            raise NameError("UNK_PKG")

def get_sources(name):
    user = getpass.getuser()
    os.system("spectool -all --get-files --directory /home/" + user + "/.fur/" + name + "/ /home/" + user + "/.fur/" + name + "/" + name + ".spec")

def get_patches(name):
    user = getpass.getuser()
    try:
        spec_file = open("/home/" + user + "/.fur/" + name + "/" + name + ".spec", "r")
        for spec_line in spec_file:
            if "Patch" in spec_line:
                spec_line = re.sub(r"Patch\d{0,5}: ", "", spec_line)
                spec_line = spec_line.rstrip()
                file_name = os.path.basename(spec_line)
                try:
                    urllib.request.urlretrieve(spec_line, "/home/" + user + "/.fur/" + name + "/" + file_name)
                except:
                    raise NameError("PATCH_MISS")
    except:
        raise NameError("BAD_SPEC")

def fur_dependencies(name):
    user = getpass.getuser()
    fur_requires_array = []
    fur_build_requires_array = []
    try:
        spec_file = open("/home/" + user + "/.fur/" + name + "/" + name + ".spec", "r")
        print("Solving dependencies from Fedora User Repository infrastructure...")
        for spec_line in spec_file:
            if "BuildRequires" in spec_line:
                spec_line = re.sub(r"BuildRequires: ", "", spec_line)
                spec_line = spec_line.rstrip()
                fur_build_requires_array.append(spec_line)
            elif "Requires" in spec_line:
                spec_line = re.sub(r"Requires: ", "", spec_line)
                spec_line = spec_line.rstrip()
                fur_requires_array.append(spec_line)
    except:
        raise NameError("BAD_SPEC")

    for fur_requires in fur_requires_array:
        # Try to get all the "Requires" from Fedora User Repository
        print("Calling dep install for " + fur_requires)
        os.system("fur install " + fur_requires)

    for fur_build_requires in fur_build_requires_array:
       os.system("fur source" + fur_build_requires + "/home/" + user + ".fur/" + name + "/SRPMS/")

def build_srpm(name, path = 0):
    user = getpass.getuser()
    if (path != 0):
        os.system("rpmbuild -bs " + "/home/" + user + "/.fur/" + name + "/" + name + ".spec --define '_sourcedir /home/" + user + "/.fur/" + path + "/' --define '_topdir /home/" + user + "/.fur/" + path + "'")
    else:
        os.system("rpmbuild -bs " + "/home/" + user + "/.fur/" + name + "/" + name + ".spec --define '_sourcedir /home/" + user + "/.fur/" + name + "/' --define '_topdir /home/" + user + "/.fur/" + name + "'")

def build_package(name):
    user = getpass.getuser()
    srpms_dir = "/home/" + user + "/.fur/" + name + "/SRPMS/"
    os.system("mockchain -r fedora-" + get_fedora_version() + "-x86_64 -m --resultdir=/home/" + user + "/.fur/" + name + "/RPMS/ " + srpms_dir + "/*")
    os.system("rm ~/.fur/" + name + "/*.src.rpm")
    os.system("rm ~/.fur/" + name + "/RPMS/*.src.rpm")

def clean_debug(name):
    os.system("rm ~/.fur/" + name + "/*-debuginfo*")

def install_package(name):
    os.system("sudo dnf install ~/.fur/" + name + "/RPMS/*.rpm")

def postinst_clean(name):
    os.system("rm -R ~/.fur/" + name)

if len(sys.argv) == 3 and sys.argv[1] == "install":
    package = sys.argv[2]
    try:
        get_spec(package)
    except NameError:
        print("Invalid package name or network problem, exiting...")
        sys.exit()
    try:
        get_sources(package)
    except NameError("SOURCE_MISS"):
        print("Cannot download one or more source files, exiting...")
        sys.exit()
    except NameError("BAD_SPEC"):
        print("Provided spec file is broken, exiting...")
        sys.exit()

    build_srpm(package)
    fur_dependencies(package)
    build_package(package)
    clean_debug(package)
    install_package(package)
    #postinst_clean(package)
elif len(sys.argv) == 4 and sys.argv[1] == "source":
    package = sys.argv[2]
    path = sys.argv[3]
    get_spec(package, path)
    get_sources(package)
    build_srpm(package, path)
else:
    print("Use fur install [package] to install something or fur source [package] [path] to get srpm")
    print("Other commands are not implemented yet...")
    sys.exit()
